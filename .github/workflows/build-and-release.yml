# Copyright (c) 2025 Minand Nellipunath Manomohanan
# 
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

# .github/workflows/build-and-release.yml
name: Build and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

permissions:
  contents: write

env:
  GO_VERSION: '1.24.4'
  APP_NAME: 'execute-my-will'
  HOMEBREW_TAP_REPO: 'minand-mohan/homebrew-execute-my-will'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-x64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-x64
            extension: .exe
          - goos: darwin
            goarch: amd64
            suffix: macos-x64
          - goos: darwin
            goarch: arm64
            suffix: macos-arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Read version from VERSION file
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION | tr -d '\n\r')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
        else
          echo "VERSION file not found, using default"
          echo "version=0.1.0" >> $GITHUB_OUTPUT
        fi
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        BINARY_NAME="${{ env.APP_NAME }}-${{ matrix.suffix }}${{ matrix.extension }}"
        go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o "dist/$BINARY_NAME" ./cmd/${{ env.APP_NAME }}/main.go
        
        # Create checksum
        cd dist
        sha256sum "$BINARY_NAME" > "$BINARY_NAME.sha256"
        cd ..
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.suffix }}
        path: |
          dist/${{ env.APP_NAME }}-${{ matrix.suffix }}${{ matrix.extension }}
          dist/${{ env.APP_NAME }}-${{ matrix.suffix }}${{ matrix.extension }}.sha256

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Read version from VERSION file
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION | tr -d '\n\r')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
        else
          echo "VERSION file not found, using default"
          echo "version=0.1.0" >> $GITHUB_OUTPUT
        fi
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "${{ env.APP_NAME }}-*" -type f | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/
    
    - name: Check if release exists
      id: check_release
      run: |
        if gh release view "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.version.outputs.version }} does not exist"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create or update release
      run: |
        if [ "${{ steps.check_release.outputs.exists }}" = "true" ]; then
          echo "Updating existing release v${{ steps.version.outputs.version }}"
          gh release upload "v${{ steps.version.outputs.version }}" release-assets/* --clobber
        else
          echo "Creating new release v${{ steps.version.outputs.version }}"
          gh release create "v${{ steps.version.outputs.version }}" \
            --title "Release v${{ steps.version.outputs.version }}" \
            --notes "Automated release for version ${{ steps.version.outputs.version }}" \
            --target main \
            release-assets/*
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_homebrew_formula:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main' && success()
    steps:
    - name: Checkout Homebrew Tap
      uses: actions/checkout@v4
      with:
        repository: ${{ env.HOMEBREW_TAP_REPO }}
        token: ${{ secrets.HOMEBREW_PAT || secrets.GITHUB_TOKEN }} # Use a PAT if available, otherwise GITHUB_TOKEN
        path: homebrew-tap

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Read version from VERSION file
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION | tr -d '\n\r')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
        else
          echo "VERSION file not found, using default"
          echo "version=0.1.0" >> $GITHUB_OUTPUT
        fi
      working-directory: ${{ github.workspace }} # Ensure this reads from the main repo's VERSION file

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: downloaded-artifacts

    - name: Update Homebrew Formula
      run: |
        FORMULA_FILE="homebrew-tap/Formula/${{ env.APP_NAME }}.rb"
        CURRENT_VERSION="${{ steps.version.outputs.version }}"

        echo "Updating version in formula to $CURRENT_VERSION"
        # Update the version line
        sed -i "s/^  version \".*\"$/  version \"${CURRENT_VERSION}\"/" "$FORMULA_FILE"

        echo "Updating SHA256 checksums in formula..."
        for sha_file in downloaded-artifacts/artifacts/*/*.sha256; do
          SHA256_SUM=$(cat "$sha_file" | awk '{print $1}')
          BINARY_NAME=$(basename "$sha_file" .sha256)

          # Determine the platform and architecture from the binary name to target the correct line
          if [[ "$BINARY_NAME" == *"-macos-arm64"* ]]; then
            echo "Updating macOS ARM64 SHA: $SHA256_SUM"
            sed -i "/binary_name = \"execute-my-will-macos-arm64\"/,+2s/sha256 \".*\"$/sha256 \"${SHA256_SUM}\"/" "$FORMULA_FILE"
          elif [[ "$BINARY_NAME" == *"-macos-x64"* ]]; then
            echo "Updating macOS x64 SHA: $SHA256_SUM"
            sed -i "/binary_name = \"execute-my-will-macos-x64\"/,+2s/sha256 \".*\"$/sha256 \"${SHA256_SUM}\"/" "$FORMULA_FILE"
          elif [[ "$BINARY_NAME" == *"-linux-arm64"* ]]; then
            echo "Updating Linux ARM64 SHA: $SHA256_SUM"
            sed -i "/binary_name = \"execute-my-will-linux-arm64\"/,+2s/sha256 \".*\"$/sha256 \"${SHA256_SUM}\"/" "$FORMULA_FILE"
          elif [[ "$BINARY_NAME" == *"-linux-x64"* ]]; then
            echo "Updating Linux x64 SHA: $SHA256_SUM"
            sed -i "/binary_name = \"execute-my-will-linux-x64\"/,+2s/sha256 \".*\"$/sha256 \"${SHA256_SUM}\"/" "$FORMULA_FILE"
          fi
        done
      working-directory: ${{ github.workspace }}

    - name: Create Pull Request
      env:
        GH_TOKEN: ${{ secrets.HOMEBREW_PAT || secrets.GITHUB_TOKEN }} # Use a PAT for permissions
      run: |
        cd homebrew-tap
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        if git diff --exit-code Formula/${{ env.APP_NAME }}.rb; then
          echo "No changes to formula. Skipping PR."
        else
          git checkout -b "update-${{ env.APP_NAME }}-v${{ steps.version.outputs.version }}"
          git add Formula/${{ env.APP_NAME }}.rb
          git commit -m "update ${{ env.APP_NAME }} to v${{ steps.version.outputs.version }}"
          git push origin "update-${{ env.APP_NAME }}-v${{ steps.version.outputs.version }}"

          gh pr create \
            --base main \
            --head "update-${{ env.APP_NAME }}-v${{ steps.version.outputs.version }}" \
            --title "Update ${{ env.APP_NAME }} to v${{ steps.version.outputs.version }}" \
            --body "Automated PR to update Homebrew formula for ${{ env.APP_NAME }} to version v${{ steps.version.outputs.version }}."
        fi
      working-directory: ${{ github.workspace }}
