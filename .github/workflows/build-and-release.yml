# Copyright (c) 2025 Minand Nellipunath Manomohanan
# 
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

# .github/workflows/build-and-release.yml
name: Build and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

permissions:
  contents: write

env:
  GO_VERSION: '1.24.4'
  APP_NAME: 'execute-my-will'
  HOMEBREW_TAP_REPO: 'minand-mohan/homebrew-execute-my-will'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-x64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-x64
            extension: .exe
          - goos: darwin
            goarch: amd64
            suffix: macos-x64
          - goos: darwin
            goarch: arm64
            suffix: macos-arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Read version from VERSION file
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION | tr -d '\n\r')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
        else
          echo "VERSION file not found, using default"
          echo "version=0.1.0" >> $GITHUB_OUTPUT
        fi
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        BINARY_NAME="${{ env.APP_NAME }}-${{ matrix.suffix }}${{ matrix.extension }}"

        # Get Git commit hash and build time
        COMMIT_SHA=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
       
        # Enhanced ldflags with version, commit, and build time
        LDFLAGS="-s -w -X main.version=${{ steps.version.outputs.version }} -X main.commit=${COMMIT_SHA} -X 'main.buildTime=${BUILD_TIME}'"
        
        echo "Building with ldflags: ${LDFLAGS}"
        go build -ldflags="${LDFLAGS}" -o "dist/$BINARY_NAME" ./cmd/${{ env.APP_NAME }}/main.go
        
        # Create checksum
        cd dist
        sha256sum "$BINARY_NAME" > "$BINARY_NAME.sha256"
        cd ..
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.suffix }}
        path: |
          dist/${{ env.APP_NAME }}-${{ matrix.suffix }}${{ matrix.extension }}
          dist/${{ env.APP_NAME }}-${{ matrix.suffix }}${{ matrix.extension }}.sha256

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Read version from VERSION file
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION | tr -d '\n\r')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
        else
          echo "VERSION file not found, using default"
          echo "version=0.1.0" >> $GITHUB_OUTPUT
        fi
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "${{ env.APP_NAME }}-*" -type f | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/
    
    - name: Check if release exists
      id: check_release
      run: |
        if gh release view "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.version.outputs.version }} does not exist"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create or update release
      run: |
        if [ "${{ steps.check_release.outputs.exists }}" = "true" ]; then
          echo "Updating existing release v${{ steps.version.outputs.version }}"
          gh release upload "v${{ steps.version.outputs.version }}" release-assets/* --clobber
        else
          echo "Creating new release v${{ steps.version.outputs.version }}"
          gh release create "v${{ steps.version.outputs.version }}" \
            --title "Release v${{ steps.version.outputs.version }}" \
            --notes "Automated release for version ${{ steps.version.outputs.version }}" \
            --target main \
            release-assets/*
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_homebrew_formula:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main'

    steps:
    # Step 1: Checkout the main application repository to access the VERSION file.
    - name: Checkout execute-my-will Repo
      uses: actions/checkout@v4
      with:
        path: main-repo

    # Step 2: Checkout the Homebrew tap repository to update the formula.
    - name: Checkout Homebrew Tap Repo
      uses: actions/checkout@v4
      with:
        repository: ${{ env.HOMEBREW_TAP_REPO }}
        token: ${{ secrets.HOMEBREW_PAT }} # Use a PAT for write access
        path: homebrew-tap

    # Step 3: Read the version from the VERSION file in the main application repo.
    - name: Read version from VERSION file
      id: version
      run: |
        VERSION_FILE="main-repo/VERSION"
        if [ -f "$VERSION_FILE" ]; then
          VERSION=$(cat "$VERSION_FILE" | tr -d '[:space:]')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version found: ${VERSION}"
        else
          echo "VERSION file not found at $VERSION_FILE. Exiting."
          exit 1
        fi

    # Step 4: Download all build artifacts created in the 'build' job.
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: downloaded-artifacts

    # Step 5: Update the version and SHA256 checksums in the Homebrew formula file.
    - name: Update Homebrew Formula
      run: |
        FORMULA_FILE="homebrew-tap/Formula/${{ env.APP_NAME }}.rb"
        VERSION="${{ steps.version.outputs.version }}"

        echo "Updating formula version to ${VERSION}"
        # Use a portable sed command to update the version line.
        sed -i.bak "s/^  version .*/  version \"${VERSION}\"/" "$FORMULA_FILE"

        echo "Updating SHA256 checksums in formula..."

        # Loop through each downloaded artifact directory to find checksums
        for artifact_dir in downloaded-artifacts/*; do
          if [ -d "$artifact_dir" ]; then
            sha_file=$(find "$artifact_dir" -name "*.sha256")
            if [ -f "$sha_file" ]; then
              SHA256_SUM=$(cat "$sha_file" | awk '{print $1}')
              BINARY_NAME=$(basename "$sha_file" .sha256)

              echo "Processing ${BINARY_NAME} with SHA ${SHA256_SUM}"

              # Update the correct sha256 in the formula based on the binary name
              if [[ "$BINARY_NAME" == *"-macos-arm64" ]]; then
                sed -i.bak -E "/if OS.mac\? && Hardware::CPU.arm\?/,/sha256/ s/sha256 .*/sha256 \"${SHA256_SUM}\"/" "$FORMULA_FILE"
              elif [[ "$BINARY_NAME" == *"-macos-x64" ]]; then
                sed -i.bak -E "/else # macos-x64/,/sha256/ s/sha256 .*/sha256 \"${SHA256_SUM}\"/" "$FORMULA_FILE"
              elif [[ "$BINARY_NAME" == *"-linux-arm64" ]]; then
                sed -i.bak -E "/if OS.linux\? && Hardware::CPU.arm\?/,/sha256/ s/sha256 .*/sha256 \"${SHA256_SUM}\"/" "$FORMULA_FILE"
              elif [[ "$BINARY_NAME" == *"-linux-x64" ]]; then
                sed -i.bak -E "/else # linux-x64/,/sha256/ s/sha256 .*/sha256 \"${SHA256_SUM}\"/" "$FORMULA_FILE"
              fi
            fi
          fi
        done
        rm -f ${FORMULA_FILE}.bak # Clean up backup files

    # Step 6: Commit the changes and create a Pull Request in the Homebrew tap repository.
    - name: Create Pull Request in Homebrew Tap
      env:
        GH_TOKEN: ${{ secrets.HOMEBREW_PAT }} # Use the PAT for creating the PR
      run: |
        cd homebrew-tap
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Check if there are changes to commit
        if git diff --quiet; then
          echo "No changes to the formula. Skipping PR."
          exit 0
        fi

        BRANCH_NAME="feat/update-${{ env.APP_NAME }}-to-v${{ steps.version.outputs.version }}"
        git checkout -b "${BRANCH_NAME}"
        git add "Formula/${{ env.APP_NAME }}.rb"
        git commit -m "feat: Update ${{ env.APP_NAME }} to v${{ steps.version.outputs.version }}"
        git push origin "${BRANCH_NAME}"

        gh pr create \
          --repo "${{ env.HOMEBREW_TAP_REPO }}" \
          --base main \
          --head "${BRANCH_NAME}" \
          --title "feat: Update ${{ env.APP_NAME }} to v${{ steps.version.outputs.version }}" \
          --body "Automated PR to update the Homebrew formula for \`${{ env.APP_NAME }}\` to version **v${{ steps.version.outputs.version }}**."