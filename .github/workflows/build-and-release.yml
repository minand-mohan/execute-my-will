# Copyright (c) 2025 Minand Nellipunath Manomohanan
# 
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

# .github/workflows/build-and-release.yml
name: Build and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

permissions:
  contents: write

env:
  GO_VERSION: '1.24.4'
  APP_NAME: 'execute-my-will'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-x64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-x64
            extension: .exe
          - goos: darwin
            goarch: amd64
            suffix: macos-x64
          - goos: darwin
            goarch: arm64
            suffix: macos-arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Read version from VERSION file
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION | tr -d '\n\r')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
        else
          echo "VERSION file not found, using default"
          echo "version=0.1.0" >> $GITHUB_OUTPUT
        fi
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        BINARY_NAME="${{ env.APP_NAME }}-${{ matrix.suffix }}${{ matrix.extension }}"
        go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o "dist/$BINARY_NAME" ./cmd/${{ env.APP_NAME }}/main.go
        
        # Create checksum
        cd dist
        sha256sum "$BINARY_NAME" > "$BINARY_NAME.sha256"
        cd ..
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.suffix }}
        path: |
          dist/${{ env.APP_NAME }}-${{ matrix.suffix }}${{ matrix.extension }}
          dist/${{ env.APP_NAME }}-${{ matrix.suffix }}${{ matrix.extension }}.sha256

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Read version from VERSION file
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION | tr -d '\n\r')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
        else
          echo "VERSION file not found, using default"
          echo "version=0.1.0" >> $GITHUB_OUTPUT
        fi
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "${{ env.APP_NAME }}-*" -type f | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/
    
    - name: Check if release exists
      id: check_release
      run: |
        if gh release view "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.version.outputs.version }} does not exist"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create or update release
      run: |
        if [ "${{ steps.check_release.outputs.exists }}" = "true" ]; then
          echo "Updating existing release v${{ steps.version.outputs.version }}"
          gh release upload "v${{ steps.version.outputs.version }}" release-assets/* --clobber
        else
          echo "Creating new release v${{ steps.version.outputs.version }}"
          gh release create "v${{ steps.version.outputs.version }}" \
            --title "Release v${{ steps.version.outputs.version }}" \
            --notes "Automated release for version ${{ steps.version.outputs.version }}" \
            --target main \
            release-assets/*
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

